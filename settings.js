const transformations = require('./src/shared/transformation-functions');
const filters = require('./src/shared/filter-functions');

const settings = () => {
    return {
        name: 'dota2_but_<name>',
        targetDirectory: 'C:\\Users\\<User>\\Documents\\Projects\\Dota2Buts',
        dotaPath: 'C:\\Program Files (x86)\\Steam\\SteamApps\\common\\dota\ 2\ beta',
        generate: 
        {
            units: true,
            heroes: true,
            items: true,
            abilities: true,
        },
        units:
        {
            dataTransformationFunction: transformations.times(10),
            // dataTransformationFunction: unitsTransformationFunction,
            shouldProcessKey: filters.blacklist(unitsKeyBlacklist),
            shouldProcessField: filters.whitelist(unitsFieldWhitelist),
            additionalTransformation: transformations.noop,
        },
        heroes:
        {
            dataTransformationFunction: transformations.times(10),
            // dataTransformationFunction: heroesTransformationFunction,
            shouldProcessKey: filters.blacklist(heroesKeyBlacklist),
            shouldProcessField: filters.whitelist(heroesFieldWhitelist),
            additionalTransformation: transformations.noop,
        },
        items:
        {
            dataTransformationFunction: transformations.times(10),
            // dataTransformationFunction: itemTransformationFunction,
            shouldProcessKey: filters.blacklist(itemsBlacklist),
            shouldProcessField: filters.blacklist(itemsBlacklist),
            additionalTransformation: transformations.noop,
            scalingFunction: transformations.f_one,
            extrapolateLevel: null,
        },
        abilities:
        {
            dataTransformationFunction: transformations.times(10),
            // dataTransformationFunction: abilityTransformationFunction,
            shouldProcessKey: filters.blacklist(abilityBlacklist),
            shouldProcessField: filters.blacklist(abilityBlacklist),
            additionalTransformation: transformations.noop,
            scalingFunction: transformations.f_one,
            extrapolateLevel: null,
        },
    };
};

var unitsTransformationFunction = (current, scaling, level, key) => {
    return current * 10;
};

var unitsKeyBlacklist = [
    'Version',
    'npc_dota_units_base',
    'npc_dota_thinker',
    'npc_dota_companion',
    'npc_dota_loadout_generic',
];

var unitsFieldWhitelist = [
    // 'VisionDaytimeRange',
    // 'VisionNighttimeRange',
    'StatusHealth',
    'StatusMana',
    // 'MovementSpeed',
    // 'BountyXP',
    // 'BountyGoldMin',
    // 'BountyGoldMax',
    'AttributeBaseStrength',
    'AttributeStrengthGain',
    'AttributeBaseIntelligence',
    'AttributeIntelligenceGain',
    'AttributeBaseAgility',
    'AttributeAgilityGain',
    'StatusHealthRegen',
    'StatusManaRegen',
    // 'FollowRange',
    // 'ProjectileSpeed',
    // 'BaseAttackSpeed',
    // 'MovementTurnRate',
    'AttackDamageMin',
    'AttackDamageMax',
    'ArmorPhysical',
    'MagicalResistance',
    'AttackDamageMin',
    'AttackDamageMax',
    // 'AttackRate',
    // 'AttackAnimationPoint',
    // 'AttackAcquisitionRange',
    // 'AttackRange',
    // 'AttackRangeBuffer'
];

var heroesTransformationFunction = (current, scaling, level, key) => {
    return current * 10;
};

var heroesKeyBlacklist = [
    'npc_dota_hero_base',
];

var heroesFieldWhitelist = [
    // 'VisionDaytimeRange',
    // 'VisionNighttimeRange',
    'StatusHealth',
    'StatusMana',
    // 'MovementSpeed',
    // 'BountyXP',
    // 'BountyGoldMin',
    // 'BountyGoldMax',
    'AttributeBaseStrength',
    'AttributeStrengthGain',
    'AttributeBaseIntelligence',
    'AttributeIntelligenceGain',
    'AttributeBaseAgility',
    'AttributeAgilityGain',
    'StatusHealthRegen',
    'StatusManaRegen',
    // 'FollowRange',
    // 'ProjectileSpeed',
    // 'BaseAttackSpeed',
    // 'MovementTurnRate',
    'AttackDamageMin',
    'AttackDamageMax',
    'ArmorPhysical',
    'MagicalResistance',
    'AttackDamageMin',
    'AttackDamageMax',
    // 'AttackRate',
    // 'AttackAnimationPoint',
    // 'AttackAcquisitionRange',
    // 'AttackRange',
    // 'AttackRangeBuffer'
    // 'AttackRangeBuffer'
];

var itemTransformationFunction = (current, base, scaling, level, key) =>
{
    return current * 10;
} 

var itemsBlacklist = [
    'Version',
    'ability_base',
    'dota_base_ability',
    'default_attack',
    'attribute_bonus',
    'special_bonus_attributes',
    'ability_capture',
    'ID',
    'OnCastbar',
    'OnLearnbar',
    'FightRecapLevel',
    'AbilitySharedCooldown',
    'AbilityModifierSupportValue',
    'AbilityModifierSupportBonus',
    'ItemCombinable',
    'ItemPermanent',
    'ItemStackable',
    'ItemRecipe',
    'ItemDroppable'	,
    'ItemPurchasable',
    'ItemSellable',
    'ItemRequiresCharges',
    'ItemKillable',
    'ItemDisassemblable',
    'ItemShareability',
    'ItemDeclaresPurchase',
    'ItemIsNeutralDrop',
    'AbilityBehavior',
    'AbilityUnitTargetTeam',
    'AbilityUnitTargetType',
    'SpellImmunityType',
    'MaxLevel',
    'AbilitySound',
    'HasShardUpgrade',
    'HasScepterUpgrade',
    'IsGrantedByShard',
    'IsGrantedByScepter',
    'AbilityCastAnimation',
    'AbilityType',
    'RequiresScepter',
    'RequiresShard',
    'ItemShopTags',
    'ItemBaseLevel',
    'ShouldBeSuggested',
    'IsObsolete',
    'IsShardUpgrade',
    'ItemContributesToNetWorthWhenDropped',
    'AllowedInBackpack',
    'IsTempestDoubleClonable',
    'AnimationIgnoresModelScale',
    'AbilityCastAnimation',
    'AnimationPlaybackRate',
    'RequiredLevel',
    'LevelsBetweenUpgrades',
    'BaseClass',
    'AbilityBehavior',
    'AbilityTextureName',
    'AbilityUnitTargetTeam',
    'AbilityUnitTargetType',
    'AbilityUnitTargetFlags',
    'AbilityUnitDamageType',
    'AbilityType',
    'ItemStockMax',
    'ItemStockTime',
    'ItemStockInitial',
    'ItemDisplayCharges',
    'ItemRequiresCharges',
    'ItemStackable',
    'ItemPermanent',
    'ItemCastOnPickup',
    'SpellDispellableType',
    'AbilityDraftUltScepterAbility',
    'AbilityDraftUltShardAbility',
    'ItemInitialCharges',
    'AbilityCastPoint',
    'item_tpscroll',
    'backdoor_protection',
    'backdoor_protection_in_base',
    'projectile_speed',
    //'AbilityCooldown',
    //'AbilityCastRange',
    //'AbilityManaCost',
    // 'ItemCost',
];


var abilityTransformationFunction = (current, base, scaling, level, key) =>
{
    return current * 10;
}

var abilityBlacklist = [
    'Version',
    'ability_base',
    'dota_base_ability',
    'default_attack',
    'attribute_bonus',
    'special_bonus_attributes',
    'ability_capture',
    'ID',
    'OnCastbar',
    'OnLearnbar',
    'FightRecapLevel',
    'AbilitySharedCooldown',
    'AbilityModifierSupportValue',
    'AbilityModifierSupportBonus',
    'ItemCombinable',
    'ItemPermanent',
    'ItemStackable',
    'ItemRecipe',
    'ItemDroppable'	,
    'ItemPurchasable',
    'ItemSellable',
    'ItemRequiresCharges',
    'ItemKillable',
    'ItemDisassemblable',
    'ItemShareability',
    'ItemDeclaresPurchase',
    'ItemIsNeutralDrop',
    'AbilityBehavior',
    'AbilityUnitTargetTeam',
    'AbilityUnitTargetType',
    'SpellImmunityType',
    'MaxLevel',
    'AbilitySound',
    'HasShardUpgrade',
    'HasScepterUpgrade',
    'IsGrantedByShard',
    'IsGrantedByScepter',
    'AbilityCastAnimation',
    'AbilityType',
    'RequiresScepter',
    'RequiresShard',
    'ItemShopTags',
    'ItemBaseLevel',
    'ShouldBeSuggested',
    'IsObsolete',
    'IsShardUpgrade',
    'ItemContributesToNetWorthWhenDropped',
    'AllowedInBackpack',
    'IsTempestDoubleClonable',
    'AnimationIgnoresModelScale',
    'AbilityCastAnimation',
    'AnimationPlaybackRate',
    'RequiredLevel',
    'LevelsBetweenUpgrades',
    'BaseClass',
    'AbilityBehavior',
    'AbilityTextureName',
    'AbilityUnitTargetTeam',
    'AbilityUnitTargetType',
    'AbilityUnitTargetFlags',
    'AbilityUnitDamageType',
    'AbilityType',
    'ItemStockMax',
    'ItemStockTime',
    'ItemStockInitial',
    'ItemDisplayCharges',
    'ItemRequiresCharges',
    'ItemStackable',
    'ItemPermanent',
    'ItemCastOnPickup',
    'SpellDispellableType',
    'AbilityDraftUltScepterAbility',
    'AbilityDraftUltShardAbility',
    'ItemInitialCharges',
    'AbilityCastPoint',
    'item_tpscroll',
    'backdoor_protection',
    'backdoor_protection_in_base',
    'projectile_speed',
    //'AbilityCooldown',
    //'AbilityCastRange',
    //'AbilityManaCost',
    // 'ItemCost',
];


module.exports = settings();